{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Creating an Agent for Complex Use Cases: A Best Practice Guide Introduction This guide provides a thorough walkthrough of the best practices to adopt when developing an agent for complex use cases. It aims to serve as a helpful resource for new and existing users as they navigate the nuances of creating an effective agent for answering questions related to complex metrics. This document assumes familiarity with the DataFacade platform. In case you are new to the platform and want to get familiar with the different features, please refer to the Onboarding Guide . Best practices In the following points we will be elaborating the best practices along with the importance of it while building and developing an agent. Before starting we would like to let every user know that \u201cThe simpler and clearer your instructions, the more efficiently the agent will learn\u201d is the fundamental idea for building any agent. Here are some tips for creating a chat agent: Note: Users are requested to refer to Appendix 1 to get a better idea of how to distinguish between an agent default context instruction and agent behavior context instructions. Provide Relevant Information Always include information that is applicable to all data in your organization in the agent default context. This ensures consistency and accuracy across all interactions. For example: If the user knows that left join should be used while joining any tables, user should mention Always use left join for joining any tables in the agent default context. Define Applicable Conditions Specify the conditions that should be considered for all user questions in the Agent Default Context. For example, if you want the answers to only consider \"completed\" and \"successful\" orders from the orders table for all questions, mention this in the default context. Specify Date and Time Format If you require a specific date and time format for the output, such as DD-MM-YYYY format and Asia Pacific time zone, mention it in the agent\u2019s default context to maintain consistency. For example to do the above For PostgresQL the instruction in the default context will be as follows: 1.Use the TO_TIMESTAMP function to convert the string into a timestamp. 2.To format it to the \"DD-MM-YYYY\" format, use the TO_CHAR function. For example to convert '12-31-2023' to 'DD-MM-YYYY' format use TO_CHAR(TO_TIMESTAMP('12-31-2023', 'MM-DD-YYYY'), 'DD-MM-YYYY') AS formatted_date. 3.To convert this to a specific Asia-Pacific timezone, use the AT TIME ZONE 'Asia/Kolkata' clause. Example: TO_CHAR(TO_TIMESTAMP(date_time_column, 'MM-DD-YYYY') AT TIME ZONE 'Asia/Kolkata', 'DD-MM-YYYY'). For SnowflakeSQL the instruction in the default context will be as follows: 1.Use TO_TIMESTAMP_TZ to convert the string to timestamp with time zone, using the 'DD-MM-YYYY' format. 2.Use AT TIME ZONE 'Asia/Singapore' converts the timestamp to the Asia/Singapore time zone. Example: TO_TIMESTAMP_TZ(date_column, 'DD-MM-YYYY') AT TIME ZONE 'Asia/Singapore'. For ClickhouseSQL the instruction to convert date time column to \"YYYY-MM-DD\" format and \"Asia Pacific\" time zone will be as follows: 1.Use formatDateTime function to format the datetime objects only for displaying the final results. Syntax of formatDateTime function is formatDateTime(time, Format). For example: question related to daily values should use %F format to display in YYYY-MM-DD format. The formatDateTime should be applied outside the toDate function when required as follows formatDateTime(toDate(datetime_column, 'Asia/Kolkata'),'%F') Be Cautious with Table Names Avoid mentioning specific table names in the default context. If a table name is mentioned, the agent will always use it, even if it's not relevant to the behavior, potentially leading to incorrect outputs. For example : Consider the instruction, Use product table for product related information , Now if user ask anything related to the word product (i.e. which product is ordered most in this month? ) it will automatically select the product table even if it is not required to select that table. Include Keywords for Behavior In the behavior section, include all relevant keywords that users might mention in their questions. This allows the system to map the question to the appropriate behavior. For instance, if users inquire about churn rate or churned customer , add keywords like churn or churn rate to the behavior keywords. Break Down Instructions Split the context or instructions into smaller steps. This makes them easier to understand. If you have a code as reference, use it to make the instruction [feature not released yet]. For example: suppose there is a behavior which needs to calculate CLTV (customer lifetime value) for each customer for a specific period (behavior to generate sql code), the instruction can be as follows: To calculate the Customer Lifetime Value (CLTV) for a specific period, follow these steps: 1. Use the \"customers\" and \"orders\" tables. 2. Join the \"customers\" and \"orders\" tables on the \"customer_id\" column. 3. Select the following columns: - \"customer_id\" - The sum of the difference between revenue and cost for each order as \"total_profit\" - The minimum join date from the \"customers\" table as \"join_date\" - The maximum order date from the \"orders\" table as \"last_order_date\" - The count of orders for each customer as \"total_orders\" - The customer lifetime in years, calculated by finding the difference in days between the maximum order date and the minimum join date, divided by 365.0 as \"customer_lifetime_years\" - The CLTV, calculated by dividing the total profit by the customer lifetime in years as \"cltv\" 4. Filter the results to include only customers who joined between the specified period using the WHERE clause with the BETWEEN keyword and the specified dates. 5. Group the results by the \"customer_id\" column. 6. The CLTV for each customer during the specified period will be calculated and displayed in the \"cltv\" column. Avoid Contradictions Make sure not to give conflicting information. This can confuse the agent. For example: Mentioning to use created_at column as reference timestamp column in the agent default context and also mentioning to use updated_at as reference timestamp column in some behavior context. Specify Functions If the agent uses SQL as the default language and you have domain knowledge, clearly state the functions to be used. This will help avoid errors. For example: consider the following code snippet: SELECT customer_id, AVG(purchase_amount) AS avg_purchase_value, COUNT(*) / DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS avg_purchase_frequency, DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS customer_lifespan, AVG(purchase_amount) * (COUNT(*) / DATEDIFF(MAX(purchase_date), MIN(purchase_date))) * DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS CLTV FROM transactions GROUP BY customer_id So here the functions used are : AVG(), COUNT(), DATEDIFF(), GROUP BY And the instruction here should be Use the functions: AVG(), COUNT(), DATEDIFF(), GROUP BY. This instruction should be specified at the end of the instruction of the behavior. Clear Instructions Avoid complicated instructions. Break them down into simple steps for better clarity. Selective Output: Choose the columns to be used in generating output carefully. This prevents unnecessary false results. Appendix 1 Instruction Type Add to agent default context? Add To behavior context? Filtering instructions Yes No Join type instructions Yes No Joining table instructions Yes No Optimization of run time related instructions Yes No Table alias related instructions Yes No Column naming instructions Yes No Timezone conversion instructions Yes No Data type casting instructions Yes No Date formatting instructions Yes No Category matching instructions Yes No Array data type handling related instructions Yes No Instruction related to priority of any clauses Yes No Instruction for identifying a specific category Yes No Identifying datetime_column instructions Yes No Identifying booking datetime_column instructions Yes No Any formula to calculate any metric No Yes Any specific function to use while calculating any metric No Yes Step wise instruction to answer any question No Yes Glossary Chat Agent A component of the DataFacade platform designed to hyper-contextualize domain-specific information. Within its configuration, users select tables and define context, enabling the agent to provide relevant answers to user queries. It is like an assistant to you which consumes all the information, business context and logics of your organization in order to provide relevant insight of your queries and help you out to get the correct insight. Default Application Context A setting in the Chat Agent of the DataFacade platform that enables users to define a broad context for responses. For example: it can be used to specify that all datetime columns are in IST and need to be converted to GMT. Behavior Behavior, in the context of a chat agent, refers to predefined responses or actions the agent takes when prompted by specific keywords or queries from the user. It can be a set of instructions, tabular information, business logic, metric definitions, or coding guidelines that guide the agent's reaction when the end user asks any queries. For example, in a retail organization, if a user inquires about \"monthly sales metrics,\" the behavior might trigger the agent to provide tabulated sales data or a visual representation of that month's sales insights. Keyword (Behavior) Context (Behavior) Data Share with Letting your team members type questions into the chat box to get insights and answers from the organization's data. Editors Individuals or users granted specific permissions to modify, configure, or update the chat agent's context, behavior, and table information to shape its responses and the insights it provides from the organization's data. Playground Chat Chat Agent training data","title":"Creating an Agent for Complex Use Cases: A Best Practice Guide"},{"location":"#creating-an-agent-for-complex-use-cases-a-best-practice-guide","text":"","title":"Creating an Agent for Complex Use Cases: A Best Practice Guide"},{"location":"#introduction","text":"This guide provides a thorough walkthrough of the best practices to adopt when developing an agent for complex use cases. It aims to serve as a helpful resource for new and existing users as they navigate the nuances of creating an effective agent for answering questions related to complex metrics. This document assumes familiarity with the DataFacade platform. In case you are new to the platform and want to get familiar with the different features, please refer to the Onboarding Guide .","title":"Introduction"},{"location":"#best-practices","text":"In the following points we will be elaborating the best practices along with the importance of it while building and developing an agent. Before starting we would like to let every user know that \u201cThe simpler and clearer your instructions, the more efficiently the agent will learn\u201d is the fundamental idea for building any agent. Here are some tips for creating a chat agent: Note: Users are requested to refer to Appendix 1 to get a better idea of how to distinguish between an agent default context instruction and agent behavior context instructions.","title":"Best practices"},{"location":"#provide-relevant-information","text":"Always include information that is applicable to all data in your organization in the agent default context. This ensures consistency and accuracy across all interactions. For example: If the user knows that left join should be used while joining any tables, user should mention Always use left join for joining any tables in the agent default context.","title":"Provide Relevant Information"},{"location":"#define-applicable-conditions","text":"Specify the conditions that should be considered for all user questions in the Agent Default Context. For example, if you want the answers to only consider \"completed\" and \"successful\" orders from the orders table for all questions, mention this in the default context.","title":"Define Applicable Conditions"},{"location":"#specify-date-and-time-format","text":"If you require a specific date and time format for the output, such as DD-MM-YYYY format and Asia Pacific time zone, mention it in the agent\u2019s default context to maintain consistency. For example to do the above For PostgresQL the instruction in the default context will be as follows: 1.Use the TO_TIMESTAMP function to convert the string into a timestamp. 2.To format it to the \"DD-MM-YYYY\" format, use the TO_CHAR function. For example to convert '12-31-2023' to 'DD-MM-YYYY' format use TO_CHAR(TO_TIMESTAMP('12-31-2023', 'MM-DD-YYYY'), 'DD-MM-YYYY') AS formatted_date. 3.To convert this to a specific Asia-Pacific timezone, use the AT TIME ZONE 'Asia/Kolkata' clause. Example: TO_CHAR(TO_TIMESTAMP(date_time_column, 'MM-DD-YYYY') AT TIME ZONE 'Asia/Kolkata', 'DD-MM-YYYY'). For SnowflakeSQL the instruction in the default context will be as follows: 1.Use TO_TIMESTAMP_TZ to convert the string to timestamp with time zone, using the 'DD-MM-YYYY' format. 2.Use AT TIME ZONE 'Asia/Singapore' converts the timestamp to the Asia/Singapore time zone. Example: TO_TIMESTAMP_TZ(date_column, 'DD-MM-YYYY') AT TIME ZONE 'Asia/Singapore'. For ClickhouseSQL the instruction to convert date time column to \"YYYY-MM-DD\" format and \"Asia Pacific\" time zone will be as follows: 1.Use formatDateTime function to format the datetime objects only for displaying the final results. Syntax of formatDateTime function is formatDateTime(time, Format). For example: question related to daily values should use %F format to display in YYYY-MM-DD format. The formatDateTime should be applied outside the toDate function when required as follows formatDateTime(toDate(datetime_column, 'Asia/Kolkata'),'%F')","title":"Specify Date and Time Format"},{"location":"#be-cautious-with-table-names","text":"Avoid mentioning specific table names in the default context. If a table name is mentioned, the agent will always use it, even if it's not relevant to the behavior, potentially leading to incorrect outputs. For example : Consider the instruction, Use product table for product related information , Now if user ask anything related to the word product (i.e. which product is ordered most in this month? ) it will automatically select the product table even if it is not required to select that table.","title":"Be Cautious with Table Names"},{"location":"#include-keywords-for-behavior","text":"In the behavior section, include all relevant keywords that users might mention in their questions. This allows the system to map the question to the appropriate behavior. For instance, if users inquire about churn rate or churned customer , add keywords like churn or churn rate to the behavior keywords.","title":"Include Keywords for Behavior"},{"location":"#break-down-instructions","text":"Split the context or instructions into smaller steps. This makes them easier to understand. If you have a code as reference, use it to make the instruction [feature not released yet]. For example: suppose there is a behavior which needs to calculate CLTV (customer lifetime value) for each customer for a specific period (behavior to generate sql code), the instruction can be as follows: To calculate the Customer Lifetime Value (CLTV) for a specific period, follow these steps: 1. Use the \"customers\" and \"orders\" tables. 2. Join the \"customers\" and \"orders\" tables on the \"customer_id\" column. 3. Select the following columns: - \"customer_id\" - The sum of the difference between revenue and cost for each order as \"total_profit\" - The minimum join date from the \"customers\" table as \"join_date\" - The maximum order date from the \"orders\" table as \"last_order_date\" - The count of orders for each customer as \"total_orders\" - The customer lifetime in years, calculated by finding the difference in days between the maximum order date and the minimum join date, divided by 365.0 as \"customer_lifetime_years\" - The CLTV, calculated by dividing the total profit by the customer lifetime in years as \"cltv\" 4. Filter the results to include only customers who joined between the specified period using the WHERE clause with the BETWEEN keyword and the specified dates. 5. Group the results by the \"customer_id\" column. 6. The CLTV for each customer during the specified period will be calculated and displayed in the \"cltv\" column.","title":"Break Down Instructions"},{"location":"#avoid-contradictions","text":"Make sure not to give conflicting information. This can confuse the agent. For example: Mentioning to use created_at column as reference timestamp column in the agent default context and also mentioning to use updated_at as reference timestamp column in some behavior context.","title":"Avoid Contradictions"},{"location":"#specify-functions","text":"If the agent uses SQL as the default language and you have domain knowledge, clearly state the functions to be used. This will help avoid errors. For example: consider the following code snippet: SELECT customer_id, AVG(purchase_amount) AS avg_purchase_value, COUNT(*) / DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS avg_purchase_frequency, DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS customer_lifespan, AVG(purchase_amount) * (COUNT(*) / DATEDIFF(MAX(purchase_date), MIN(purchase_date))) * DATEDIFF(MAX(purchase_date), MIN(purchase_date)) AS CLTV FROM transactions GROUP BY customer_id So here the functions used are : AVG(), COUNT(), DATEDIFF(), GROUP BY And the instruction here should be Use the functions: AVG(), COUNT(), DATEDIFF(), GROUP BY. This instruction should be specified at the end of the instruction of the behavior.","title":"Specify Functions"},{"location":"#clear-instructions","text":"Avoid complicated instructions. Break them down into simple steps for better clarity. Selective Output: Choose the columns to be used in generating output carefully. This prevents unnecessary false results.","title":"Clear Instructions"},{"location":"#appendix-1","text":"Instruction Type Add to agent default context? Add To behavior context? Filtering instructions Yes No Join type instructions Yes No Joining table instructions Yes No Optimization of run time related instructions Yes No Table alias related instructions Yes No Column naming instructions Yes No Timezone conversion instructions Yes No Data type casting instructions Yes No Date formatting instructions Yes No Category matching instructions Yes No Array data type handling related instructions Yes No Instruction related to priority of any clauses Yes No Instruction for identifying a specific category Yes No Identifying datetime_column instructions Yes No Identifying booking datetime_column instructions Yes No Any formula to calculate any metric No Yes Any specific function to use while calculating any metric No Yes Step wise instruction to answer any question No Yes","title":"Appendix 1"},{"location":"#glossary","text":"","title":"Glossary"},{"location":"#chat-agent","text":"A component of the DataFacade platform designed to hyper-contextualize domain-specific information. Within its configuration, users select tables and define context, enabling the agent to provide relevant answers to user queries. It is like an assistant to you which consumes all the information, business context and logics of your organization in order to provide relevant insight of your queries and help you out to get the correct insight.","title":"Chat Agent"},{"location":"#default-application-context","text":"A setting in the Chat Agent of the DataFacade platform that enables users to define a broad context for responses. For example: it can be used to specify that all datetime columns are in IST and need to be converted to GMT.","title":"Default Application Context"},{"location":"#behavior","text":"Behavior, in the context of a chat agent, refers to predefined responses or actions the agent takes when prompted by specific keywords or queries from the user. It can be a set of instructions, tabular information, business logic, metric definitions, or coding guidelines that guide the agent's reaction when the end user asks any queries. For example, in a retail organization, if a user inquires about \"monthly sales metrics,\" the behavior might trigger the agent to provide tabulated sales data or a visual representation of that month's sales insights.","title":"Behavior"},{"location":"#keyword-behavior","text":"","title":"Keyword (Behavior)"},{"location":"#context-behavior","text":"","title":"Context (Behavior)"},{"location":"#data","text":"","title":"Data"},{"location":"#share-with","text":"Letting your team members type questions into the chat box to get insights and answers from the organization's data.","title":"Share with"},{"location":"#editors","text":"Individuals or users granted specific permissions to modify, configure, or update the chat agent's context, behavior, and table information to shape its responses and the insights it provides from the organization's data.","title":"Editors"},{"location":"#playground","text":"","title":"Playground"},{"location":"#chat","text":"","title":"Chat"},{"location":"#chat-agent-training-data","text":"","title":"Chat Agent training data"}]}